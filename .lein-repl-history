(+ 1 nil)
(1)
(+ 1 2)
(+ (get [1 2 3] 0) (get [1 2 3] 2)
)
(+ (get [1 2 3] 0) (get [1] 2)
)
(get [1] 3)
(spiff [1 2 3])
(use 'structured-data)
use 'strucuted-data
(spiff [1 2 3])
use 'strucuted-data
(spiff [1 2 3])
use 'structuted-data
use 'structured-data
(spiff [1 2 3])
(use 'structured-data)
use 'structured-data
(use 'structured-data)
(do-a-thing 3)
(use 'structured-data)
(do-a-thing 3)
(use 'structured-data)
(do-a-thing 3)
(do-a-thing 9)
(do-a-thing 1)
(do-a-thing 14)
(do-a-thing 999)
(spiff 7)
(spiff 3)
(spiff [1 2 3])
(spiff [1])
(count [])
(count [1])
(conj [1 2 3] 4) )
(conj [1 2 3] 4))
(conj [1 2 3] 4)
(conj [1 2 3] "<3")
(conj [] "<3")
(use 'structured-data)
(spiff [1 2 3])
(use 'structured-data)
(spiff [1 2 3])
(use 'structured-data)
(spiff [1 2 3])
(cutify [1 2 3])
(use 'structured-data)
(let [[[x1 y1] [x2 y2]] rectangle]
    (- y2 y1)
(use 'structured-data)
(height (rectangle [1 1] [5 1]))
(height (rectangle [1 1] [5 4]))
(width (rectangle [1 1] [5 4]))
(width (rectangle [9 1] [5 4]))
(square? (rectangle [1 1] [2 2]))
(use 'structured-data)
(square? (rectangle [1 1] [2 2]))
(square? (rectangle [1 1] [1 1]))
(square? (rectangle [1 1] [1 3]))
(square? (rectangle [1 1] [1 2]))
(let [[[x1 y1] [x2 y2]] rectangle]
    (- x2 x1)
  )
(square? (rectangle [1 1] [1 3]))
(contains-point? (rectangle [0 0] [2 2])
                 (point -3 1)) 
(contains-point? (rectangle [0 0] [2 2])
                 (point -3 1)) 
(contains-point? (rectangle [0 0] [2 2])
                 (point -3 1)) 
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(width (rectangle [9 1] [5 4]))
(use 'structured-data)
(contains-point? (rectangle [0 0] [2 2])
                 (point 1 1))
(contains-point? (rectangle [0 0] [2 2])
(use 'structured-data)
contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2])
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(contains-rectangle? (rectangle [0 0] [3 3])
                     (rectangle [1 1] [2 2]))
(let [original [1 2 3 4]
      new      (assoc original 2 "foo")]
  original)
(let [original [1 2 3 4]
      new      (assoc original 2 "foo")]
  new)
(assoc cities :awards ["Hugo", "World Fantasy Award",
                       "Arthur C. Clarke Award",
                       "British Science Fiction Award"])
(def cities {:title "The City and the City" :authors [china]})
(seq {:a 42 :b "foo" :c ["ur" "dad"]})
(first (seq [1 2 3]))
(rest (seq [1 2 3]))
(apply + [1 2 3])
(apply + [* * *])
(apply + [str(*) str(*) str(*)])
(* 5 "*")
(stars 5)
(monotonic? [1 2 3])  
(toggle #{:a :b :c} :d)
(toggle #{:a :b :c} :a)
(contains-duplicates? [1 1 2 3 -40])
(contains-duplicates? [1 2 3 -40])
